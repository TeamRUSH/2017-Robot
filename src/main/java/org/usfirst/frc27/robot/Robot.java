// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc27.robot;

import com.ctre.CANTalon.TalonControlMode;
import com.kauailabs.navx.frc.AHRS;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.PowerDistributionPanel;
import edu.wpi.first.wpilibj.SPI;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.CommandGroup;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.networktables.NetworkTable;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc27.robot.commandgroups.*;
import org.usfirst.frc27.robot.state.RobotState;
import org.usfirst.frc27.robot.subsystems.*;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */

public class Robot extends IterativeRobot {

    Command autonomousCommand;
    SendableChooser<CommandGroup> autoChooser;

    public static final int TURN_LEFT = 0;
    public static final int TURN_RIGHT = 1;

    public static NetworkTable table;
    public static ControllerInputMap controllerInputMap;
    public static Auger auger;
    public static Climber climber;
    public static BallElevator ballElevator;
    public static Harvester harvester;
    public static Shooter shooter;
    public static DriveTrain driveTrain;
    public static Turret turret;
    public static HarvesterArm harvesterArm;
    public static PowerDistributionPanel pdp;
    public static RobotState state;
    public static DriverStation ds;
    public static AHRS navx;
    public static BlinkenLights lights;
    public static Flipper flipper;
    public static ShooterOffset shooterOffset;

    public Robot() {
    	try {
            /* Communicate w/navX MXP via the MXP SPI Bus.
            Alternatively:  I2C.Port.kMXP, SerialPort.Port.kMXP or SerialPort.Port.kUSB
            See http://navx-mxp.kauailabs.com/guidance/selecting-an-interface/ for details. */
            navx = new AHRS(SPI.Port.kMXP);

            SmartDashboard.putBoolean("isconnected", navx.isConnected());

        } catch (RuntimeException ex ) {
        	SmartDashboard.putString("Nav X", "Not Initialized");
            DriverStation.reportError("Error instantiating navX MXP:  " + ex.getMessage(), true);
        }
    }

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
        state = new RobotState();
        RobotMap.init();

        // Constructors
		auger = new Auger();
		climber = new Climber();
		ballElevator = new BallElevator();
        shooter = new Shooter();
        driveTrain = new DriveTrain();
        turret = new Turret();
        harvester = new Harvester();
        harvesterArm = new HarvesterArm();
        pdp = new PowerDistributionPanel(0);
        ds = DriverStation.getInstance();
        lights = new BlinkenLights();
        flipper = new Flipper();
        shooterOffset = new ShooterOffset();

        // don't move.
        controllerInputMap = new ControllerInputMap();

        // Autonomous Routine Chooser
        autoChooser = new SendableChooser<CommandGroup>();
		autoChooser.addObject("RED Center Gear", new CenterPegGearNoArmAndShootRed2());
		autoChooser.addObject("RED Left Gear", new LeftPegGearNoArmRed());
		autoChooser.addObject("RED Boiler Gear", new RightPegGearNoArmAndShootRed());
        autoChooser.addObject("BLUE Center Gear", new CenterPegGearNoArmAndShootBlue2());
        autoChooser.addObject("BLUE Boiler Gear", new LeftPegGearNoArmAndShootBlue());
        autoChooser.addObject("BLUE Right Gear", new RightPegGearNoArmBlue());
		autoChooser.addObject("Do Nothing", new Nothing());
		autoChooser.addDefault("RED RP Auto", new RPAutoRed2());
        autoChooser.addObject("RED Assist", new XRPAutoRed());
        autoChooser.addObject("BLUE RP Auto", new RPAutoBlue2());
		autoChooser.addObject("BLUE Assist", new XRPAutoBlue());
		SmartDashboard.putData("Selected Auton", autoChooser);
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit() {
		Robot.shooter.disable();
		DriverStation.reportWarning(String.format("Match Ending! - %s", LocalDateTime.now().format(DateTimeFormatter.ISO_DATE_TIME)),false);
	}

    public void disabledPeriodic() {
		autonomousCommand = autoChooser.getSelected();
//		System.out.println("Left Peg: " + RobotMap.leftPegSensor.get() + " - Right Peg: " + RobotMap.rightPegSensor.get());
    	Scheduler.getInstance().run();
    }

    public void autonomousInit() {
        // schedule the autonomous command (example)
        if (autonomousCommand != null){
            autonomousCommand.start();
        }
        DriverStation.reportWarning(String.format("Match Starting! - %s", LocalDateTime.now().format(DateTimeFormatter.ISO_DATE_TIME)),false);
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.

        if (autonomousCommand != null) {
            autonomousCommand.cancel();
        }
        
        Robot.driveTrain.setControlMode(TalonControlMode.PercentVbus);
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
}
